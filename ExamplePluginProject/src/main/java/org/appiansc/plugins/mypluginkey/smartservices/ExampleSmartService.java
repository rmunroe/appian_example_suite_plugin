package org.appiansc.plugins.mypluginkey.smartservices;

import com.appiancorp.suiteapi.common.Name;
import com.appiancorp.suiteapi.content.ContentOutputStream;
import com.appiancorp.suiteapi.content.ContentService;
import com.appiancorp.suiteapi.knowledge.Document;
import com.appiancorp.suiteapi.knowledge.DocumentDataType;
import com.appiancorp.suiteapi.knowledge.FolderDataType;
import com.appiancorp.suiteapi.process.exceptions.SmartServiceException;
import com.appiancorp.suiteapi.process.framework.AppianSmartService;
import com.appiancorp.suiteapi.process.framework.Input;
import com.appiancorp.suiteapi.process.framework.MessageContainer;
import com.appiancorp.suiteapi.process.framework.Required;
import com.appiancorp.suiteapi.process.palette.PaletteInfo;
import org.apache.log4j.Logger;
import org.appiansc.plugins.mypluginkey.datatypes.ExampleDatatype;
import org.appiansc.plugins.mypluginkey.helpers.ExamplePluginHelper;

@PaletteInfo(paletteCategory = ExamplePluginHelper.SMARTSERVICE_PALLETCATEGORY, palette = ExamplePluginHelper.SMARTSERVICE_PALLET)
public class ExampleSmartService extends AppianSmartService {
    private static final Logger LOG = Logger.getLogger(ExampleSmartService.class);

    // Input private vars
    private ExampleDatatype exampleDatatype;
    private Long someAppianDocument;
    private String someDropdownValue;
    private String basicStringField;
    private Long someAppianFolder;

    // Output private vars
    private Long convertedDocument;
    private String errorTxt;
    private Boolean errorOccurred = false;

    private final ContentService contentService;

    @Override
    public void run() throws SmartServiceException {
        try {
            // Do your heavy lifting here

            LOG.info("Date from custom datatype is " + this.exampleDatatype.getDateField().toString());

            Document appianDocument = ExamplePluginHelper.getDocument(this.contentService, this.someAppianDocument);

            LOG.info("Appian document is physically located at: " +
                    ExamplePluginHelper.getPhysicalFilePath(this.contentService, appianDocument.getId()));

            Document newDocument = ExamplePluginHelper.createNewDocument(
                    this.basicStringField,
                    "New document generated by my plugin",
                    this.someAppianFolder,
                    this.someDropdownValue
            );

            ContentOutputStream cos = ExamplePluginHelper.uploadDocumentForWriting(this.contentService, newDocument);

            // write to the cos stream or something...

            this.convertedDocument = cos.getContentId(); // get the new Document's ID

            cos.close();

        } catch (Exception e) {
            LOG.error(e.getMessage());
            errorOccurred = true;
            errorTxt = e.getMessage();
        }
    }

    public ExampleSmartService(ContentService contentService) {
        super();
        this.contentService = contentService;
    }

    @Override
    public void onSave(MessageContainer messages) {
    }

    @Override
    public void validate(MessageContainer messages) {
    }


    // Inputs

    @Input(required = Required.ALWAYS)
    @Name("exampleDatatype")
    public void setExampleDatatype(ExampleDatatype val) {
        this.exampleDatatype = val;
    }

    @Input(required = Required.ALWAYS)
    @Name("someAppianDocument")
    @DocumentDataType
    public void setSomeAppianDocument(Long val) {
        this.someAppianDocument = val;
    }

    @Input(required = Required.OPTIONAL)
    @Name("someAppianFolder")
    @FolderDataType
    public void setSomeAppianFolder(Long val) {
        this.someAppianFolder = val;
    }

    @Input(required = Required.ALWAYS, enumeration = "listOfStringItems")
    @Name("someDropdownValue")
    public void setSomeDropdownValue(String val) {
        this.someDropdownValue = val;
    }

    @Input(required = Required.OPTIONAL)
    @Name("basicStringField")
    public void setBasicStringField(String val) {
        this.basicStringField = val;
    }


    // Outputs

    @Name("convertedDocument")
    @DocumentDataType
    public Long getConvertedDocument() {
        return convertedDocument;
    }

    @Name("errorTxt")
    public String getErrorTxt() {
        return errorTxt;
    }

    @Name("errorOccurred")
    public Boolean getErrorOccurred() {
        return errorOccurred;
    }
}
